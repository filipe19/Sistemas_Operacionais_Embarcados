Para todas as questões, compile-as com o gcc e execute-as via terminal.

1. Crie um "Olá mundo!" em C.
R:
#include <stdio.h>
#include <stdlib.h>

int main(int argc, char const *argv[] ) {
  printf( "%s\n " , "ola mundo!");
  return 0;
}

2. Crie um código em C que pergunta ao usuário o seu nome, e imprime no terminal "Ola " e o nome do usuário. 
Por exemplo, considerando que o código criado recebeu o nome de 'ola_usuario_1':

$ ./ola_usuario_1
$ Digite o seu nome: Eu
$ Ola Eu

R:
#include <stdio.h>
#include <stdlib.h>

int main( int argc , char const *argv[]) {
  char nome[20];
  printf("digite seu nome:");
  scanf("%s", nome );
  printf("ola, %s!\n",nome);
  return 0;
}

3. Apresente os comportamentos do código anterior nos seguintes casos:
(a) Se o usuário insere mais de um nome.

$ ./ola_usuario_1
$ Digite o seu nome: Eu Mesmo
R: digite seu nome: eu mesmo ola, eu!

(b) Se o usuário insere mais de um nome entre aspas duplas. Por exemplo:

$ ./ola_usuario_1
$ Digite o seu nome: "Eu Mesmo"
R: digite seu nome: "eu mesmo" ola, "eu!

(c) Se é usado um pipDigite seu nome: "Eu Mesmo" Ola, "Eu!e. Por exemplo:

$ echo Eu | ./ola_usuario_1
R: digite seu nome:ola, eu!

(d) Se é usado um pipe com mais de um nome. Por exemplo:

$ echo Eu Mesmo | ./ola_usuario_1
R: digite seu nome:ola, eu!

(e) Se é usado um pipe com mais de um nome entre aspas duplas. Por exemplo:

$ echo "Eu Mesmo" | ./ola_usuario_1
R:digite seu nome:ola, eu!

(f) Se é usado o redirecionamento de arquivo. Por exemplo:

$ echo Ola mundo cruel! > ola.txt
$ ./ola_usuario_1 < ola.txt
R: digite seu nome: ola, ola!

4. Crie um código em C que recebe o nome do usuário como um argumento de entrada (usando as variáveis argc e *argv[]), 
e imprime no terminal "Ola " e o nome do usuário. Por exemplo, considerando que o código criado recebeu o nome de 'ola_usuario_2':
$ ./ola_usuario_2 Eu
$ Ola Eu
R: 
#include <stdlib.h>
#include <stdio.h>

int main( int argc, char const *argv[] ) {
  printf("Ola");
  for ( int i=1; i<argc; i++ ) {
    printf(" %s", argv[i]);
  }
  printf("\n ");
  return 0;
}

5. Apresente os comportamentos do código anterior nos seguintes casos:
(a) Se o usuário insere mais de um nome.

$ ./ola_usuario_2 Eu Mesmo
R: Ola eu mesmo

(b) Se o usuário insere mais de um nome entre aspas duplas. Por exemplo:

$ ./ola_usuario_2 "Eu Mesmo"
R: Ola eu mesmo

(c) Se é usado um pipe. Por exemplo:

$ echo Eu | ./ola_usuario_2
R: Ola

(d) Se é usado um pipe com mais de um nome. Por exemplo:

$ echo Eu Mesmo | ./ola_usuario_2
R: Ola

(e) Se é usado um pipe com mais de um nome entre aspas duplas. Por exemplo:

$ echo Eu Mesmo | ./ola_usuario_2
R: Ola

(f) Se é usado o redirecionamento de arquivo. Por exemplo:

$ echo Ola mundo cruel! > ola.txt
$ ./ola_usuario_2 < ola.txt
R: Ola

6. Crie um código em C que faz o mesmo que o código da questão 4, e em seguida imprime no terminal quantos valores de entrada 
foram fornecidos pelo usuário. Por exemplo, considerando que o código criado recebeu o nome de 'ola_usuario_3':
$ ./ola_usuario_3 Eu
$ Ola Eu
$ Numero de entradas = 2
R: 
#include <stdio.h>
#include <stdlib.h>

int main( int argc, char **argv){	
printf("Olá, %s. \n ", argv[1] );
	printf(" Numero de entradas =  %d.", argc);
	return 0;
}
## saida
$ ./reciprocal usuario
Olá, usuario. 
Numero de entradas =  2.


7. Crie um código em C que imprime todos os argumentos de entrada fornecidos pelo usuário. Por exemplo, considerando que o 
código criado recebeu o nome de 'ola_argumentos':
$ ./ola_argumentos Eu Mesmo e Minha Pessoa
$ Argumentos: Eu Mesmo e Minha Pessoa
R:
#include <stdio.h>
#include <stdlib.h>

int main(int argc, char **argv){	
int n=1;
	printf("Argumentos: ");	
	for(1; n < argc; n++)	{
	printf("%s ", argv[n]);
	}
	return 0;
}221


8. Crie uma função que retorna a quantidade de caracteres em uma string, usando o seguinte protótipo: 
int Num_Caracs(char *string); Salve-a em um arquivo separado chamado 'num_caracs.c'. 
Salve o protótipo em um arquivo chamado 'num_caracs.h'. Compile 'num_caracs.c' para gerar o objeto 'num_caracs.o'.
R:
#include <stdio.h>
#include <stdlib.h>
#include "num_caracs.h"

int main(int argc, char **argv ){
	int tamanho;
	char numero[100];
	gets(numero);
	tamanho = Num_Caracs(numero);
	printf("Tamanho: %d ", tamanho);
	return 0;
}

//num_caracs.h
int Num_Caracs(char *string);

//num_caracs.c
#include "num_caracs.h"

int Num_Caracs(char *string){
	int tamanho;	
	tamanho = strlen(string);
	return tamanho;
}

$ ./num_caracs
usuario
Tamanho: 7

9. Re-utilize o objeto criado na questão 8 para criar um código que imprime cada argumento de entrada e a quantidade de caracteres 
de cada um desses argumentos. Por exemplo, considerando que o código criado recebeu o nome de 'ola_num_caracs_1':

$ ./ola_num_caracs_1 Eu Mesmo
$ Argumento: ./ola_num_caracs_1 / Numero de caracteres: 18
$ Argumento: Eu / Numero de caracteres: 2
$ Argumento: Mesmo / Numero de caracteres: 5
R:
$ ./num_caracs
usuario do sistema
Argumento: usuario / Numero de caracteres: 7.
Argumento: do / Numero de caracteres: 2.
Argumento: sistema / Numero de caracteres:7.

// MAIN
#include <stdio.h>
#include <stdlib.h>
#include "num_caracs.h"

int main(int argc, char **argv){
	char numero[100];
	gets(numero );	
	Num_Caracs(numero);
	return 0;
}

// NUM_CARACS.c
#include "num_caracs.h"

int Num_Caracs(char *string){
	int tamanho = 0, tamanho_tot, aux = 0, n;
	char temporario[50];	
	tamanho_tot = strlen(string);
	
for (n = 0; n <= tamanho_tot ; n++){		
			temporario[aux] = string[n];	
	
  if((string[n] == ' ' ) || (string[n] == '\n')|| ( n == tamanho_tot)) {
  temporario[aux] = '\0';
			tamanho = strlen(temporario);
			printf( "Argumento: %s / Numero de caracteres: %d.\n", temporario, tamanho);
			aux = -1;
			}
		aux++;
	}
	return 0;
}

//NUM_CARACS.h
int Num_Caracs(char *string);


10. Crie um Makefile para a questão anterior.
R: 
reciprocal: main.o num_caracs.o
	gcc $(CFLAGS ) -o num_caracs main.o num_caracs.o
main.o: main.c num_caracs.h
	gcc $(CFLAGS) -c main.c
reciprocal.o: num_caracs.c num_caracs.h
	gcc $(CFLAGS) -c num_caracs.c
clean:
	rm -f *.o num_caracs

11. Re-utilize o objeto criado na questão 8 para criar um código que imprime o total de caracteres nos argumentos de entrada. 
Por exemplo, considerando que o código criado recebeu o nome de 'ola_num_caracs_2':

$ ./ola_num_caracs_2 Eu Mesmo
$ Total de caracteres de entrada: 25
R:
$ ./num_caracs usuario
Tamanho: 8
//MAIN

#include <stdio.h>
#include <stdlib.h>
#include "num_caracs.h"

int main( int argc, char **argv){
	int n, tamanho_arg, tamanho_arg_2;
	for( n=0; n<argc; n++){
	tamanho_arg = tamanho_arg + Num_Caracs(argv[n]);
	}
	printf( "Tamanho: %d ", tamanho_arg );
	return 0;
}

12. Crie um Makefile para a questão anterior.
R: 
reciprocal: main.o num_caracs.o
	gcc $(CFLAGS) -o num_caracs main.o num_caracs.o
main.o: main.c num_caracs.h
	gcc $(CFLAGS) -c main.c
reciprocal.o: num_caracs.c num_caracs.h
	gcc $(CFLAGS) -c num_caracs.c
clean:
	rm -f *.o num_caracs
